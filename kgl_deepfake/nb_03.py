# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_mesonet.ipynb (unless otherwise specified).

__all__ = ['MesoNet']

# Cell
import torch.nn as nn
import torch.nn.functional as F

# Cell
# By Nathan Hubens.
# Paper implementation does not use Adaptive Average Pooling. To get the exact same implementation,
# comment the avg_pool and uncomment the final max_pool layer.
class MesoNet(nn.Module):
    def __init__(self):
        super().__init__()

        self.conv1 = nn.Conv2d(3, 8, 3, 1,1) # 8 x 256 x 256
        self.bn1 = nn.BatchNorm2d(8)
        self.conv2 = nn.Conv2d(8, 8, 5, 1,2) # 8 x 128 x 128
        self.bn2 = nn.BatchNorm2d(8)
        self.conv3 = nn.Conv2d(8, 16, 5, 1,2) # 8 x 64 x 64
        self.bn3 = nn.BatchNorm2d(16)
        self.conv4 = nn.Conv2d(16,16,5,1,2) # 8 x 32 x 32
        self.bn4 = nn.BatchNorm2d(16)
        self.avg_pool = nn.AdaptiveAvgPool2d((8))
        self.fc1 = nn.Linear(1024, 16)
        self.fc2 = nn.Linear(16, 2)

    def forward(self, x):

        x = F.relu(self.conv1(x))
        x = self.bn1(x)
        x = F.max_pool2d(x, 2, 2)

        x = F.relu(self.conv2(x))
        x = self.bn2(x)
        x = F.max_pool2d(x, 2, 2)

        x = F.relu(self.conv3(x))
        x = self.bn3(x)
        x = F.max_pool2d(x, 2, 2)

        x = F.relu(self.conv4(x))
        x = self.bn4(x)
        #x = F.max_pool2d(x, 4, 4)

        x = self.avg_pool(x)

        x = x.reshape(x.shape[0], -1)

        x = F.dropout(x, 0.5)
        x = F.relu(self.fc1(x))
        x = F.dropout(x,0.5)
        x = self.fc2(x)
        return x