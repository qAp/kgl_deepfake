# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01b_get_one_face.ipynb (unless otherwise specified).

__all__ = ['get_first_face', 'get_has_face', 'VideoFaceList']

# Cell
from fastai.vision import *
from .nb_00 import *
from .nb_01 import *
from IPython.display import HTML
import cv2
import pandas as pd
from facenet_pytorch import MTCNN

# Cell
def get_first_face(detector, fn, resize=.5):
    '''
    Returns the first detected face from a video
    '''
    v_cap = cv2.VideoCapture(str(fn))
    v_len = int(v_cap.get(cv2.CAP_PROP_FRAME_COUNT))
    iframe, face = None, None
    for i in range(v_len):
        _ = v_cap.grab()
        success, frame = v_cap.retrieve()
        if not success: continue
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        frame = PIL.Image.fromarray(frame)
        if resize is not None: frame = frame.resize([int(d * resize) for d in frame.size])
        face = detector(frame)
        if face is not None:
            iframe = i
            break
    v_cap.release()
    return iframe, face

# Cell
def get_has_face(fnames, detector):
    if isinstance(fnames, (str, Path)): fnames = [fnames]
    res = []
    for i in progress_bar(range(len(fnames))):
        iframe, face = get_first_face(detector, fnames[i])
        res.append(True if iframe is not None else False)
    return res

# Cell
class VideoFaceList(ImageList):
    def __init__(self, *args, detector=None, resize=.5, device=None, **kwargs):
        if device is None: device = 'cuda:0' if torch.cuda.is_available() else 'cpu'
        if detector is None: detector = MTCNN(device=device, post_process=False)
        self.detector, self.resize = detector, resize
        super().__init__(*args, **kwargs)

    def get_face(self, fn:Path):
        iframe, face = get_first_face(self.detector, fn, self.resize)
        if iframe is None or face is None: raise Exception(f'No faces detected in {fn}')
        return iframe, face

    def open(self, fn:Path):
        iframe, face = self.get_face(fn)
        return Image(face / 255)